/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUIMapa.java
 *
 * Created on 02/11/2011, 07:18:04 PM
 */

package Algoritmos.Mapa;

import Algoritmos.RecorridoOptimo.Cromosoma;
import BusinessEntity.RackBE;
import BusinessEntity.UbicacionBE;
import BusinessEntity.ZonaBE;
import BusinessLogic.RackBL;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.Border;


/**
 *
 * @author carlitos
 */
public class GUIMapa extends javax.swing.JFrame {

    /** Creates new form GUIMapa */
    public GUIMapa() {
        initComponents();
    }

    public GUIMapa(Mapa mapa) {
        this.mapa = mapa;
        calcularFactores();
        initComponents();
        inicializarFrame();
    }

    public GUIMapa(Mapa mapa, ArrayList<UbicacionBE> mejoresUbicaciones) {
        this.mapa = mapa;
        calcularFactores();
        this.mejoresUbicaciones= mejoresUbicaciones;
        initComponents();
        inicializarFrame();
    }
       
    public GUIMapa(ArrayList<Nodo> recorridoOptimo, Mapa mapa) {
        this.mapa = mapa;
        calcularFactores();
        this.recorridoOptimo = recorridoOptimo;
        initComponents();
        inicializarFrame();
    }

    private void inicializarFrame()
    {
        setBounds(new java.awt.Rectangle(0100, 0, 1024, 768));
        this.createBufferStrategy(2);
        scrollbar1.setMaximum((int)(0.62*(mapa.getNumY())));
        scrollbar2.setMaximum((int)(0.79*(mapa.getNumX())));
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollbar1 = new java.awt.Scrollbar();
        scrollbar2 = new java.awt.Scrollbar();

        setTitle("Mapa del almacén");
        setBounds(new java.awt.Rectangle(400, 400, 800, 600));
        setName("mapaFrame"); // NOI18N
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        scrollbar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        scrollbar1.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                scrollbar1AdjustmentValueChanged(evt);
            }
        });
        getContentPane().add(scrollbar1, java.awt.BorderLayout.LINE_END);

        scrollbar2.setOrientation(java.awt.Scrollbar.HORIZONTAL);
        scrollbar2.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                scrollbar2AdjustmentValueChanged(evt);
            }
        });
        getContentPane().add(scrollbar2, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void scrollbar1AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_scrollbar1AdjustmentValueChanged
        // TODO add your handling code here:
        ajustarGraficoVertical(evt);
    }//GEN-LAST:event_scrollbar1AdjustmentValueChanged

    private void scrollbar2AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_scrollbar2AdjustmentValueChanged
        // TODO add your handling code here:
        ajustarGraficoHorizontal(evt);
    }//GEN-LAST:event_scrollbar2AdjustmentValueChanged

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
        JOptionPane.showMessageDialog(null, "X: " + obtenerX(evt.getX()) + "\nY: " + obtenerY(evt.getY()), "Posición",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_formMouseClicked

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIMapa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Scrollbar scrollbar1;
    private java.awt.Scrollbar scrollbar2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void paint(Graphics g)
    {
        pintar(g);
    }


    public void pintar(Graphics g) {

           Graphics2D g2 = (Graphics2D)g;
           g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                 RenderingHints.VALUE_ANTIALIAS_ON);
           g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);

           super.paint(g);

           dibujaCoordenadas(g);

           dibujaUbicaciones(g);

           dibujaZonas(g);

           if (mejoresUbicaciones != null) dibujaMejoresUbicaciones(g);
           if (recorridoOptimo != null) dibujaRecorridoOptimo(g);

           dibujaLeyenda(g);
    }



    private void dibujaCoordenadas(Graphics g)
    {
        g.setColor(Color.BLACK);

        for (int i=0;i<mapa.getNumX();i++)
        {
            g.drawString(String.valueOf(i), factorX*i+offSetX+(factorX/2), offSetY-15/*50*/);
        }

        for (int j=0;j<mapa.getNumY();j++)
        {
            g.drawString(String.valueOf(j), offSetX-30/*25*/, factorY*j+offSetY+(factorY/2));
        }

    }
    

    private void dibujaUbicaciones(Graphics g)
    {
        for (Nodo nodo : mapa.getListaNodos())
        {
            if (nodo.isNodoInicial())
            {
                g.setColor(Color.ORANGE);
                g.fillRect(convertirX(nodo.getX()), convertirY(nodo.getY()), factorX, factorY);
                g.drawRect(convertirX(nodo.getX()), convertirY(nodo.getY()), factorX, factorY);
            }
            else if (nodo.getItem()==null)
            {
                g.setColor(Color.BLACK);
                g.drawRect(convertirX(nodo.getX()), convertirY(nodo.getY()), factorX, factorY);
            }
            else
            {
                g.setColor(Color.BLACK);
                g.fillRect(convertirX(nodo.getX()), convertirY(nodo.getY()), factorX, factorY);
                g.drawRect(convertirX(nodo.getX()), convertirY(nodo.getY()), factorX, factorY);
            }
        }
    }


    private void dibujaZonas(Graphics g)
    {
        for (ZonaBE zona : mapa.getListaZonas())
        {
                g.setColor(Color.BLUE);
                g.drawRect(convertirX(zona.getPosX()), convertirY(zona.getPosY()), factorX*zona.getAncho(), factorY*zona.getLargo());
        }
    }


    private void dibujaMejoresUbicaciones(Graphics g)
    {
        for (UbicacionBE ubicacion : mejoresUbicaciones)
        {
                RackBL rackBL = new RackBL();
                RackBE rack = rackBL.getByIdRack(ubicacion.getIdRack());

                if (rack.getOrientacion().equals("V"))
                {
                    g.setColor(Color.RED);
                    g.fillRect(convertirX(rack.getPosX()), convertirY(rack.getPosY()+ubicacion.getColumna()-1), factorX, factorY);
                    g.drawRect(convertirX(rack.getPosX()), convertirY(rack.getPosY()+ubicacion.getColumna()-1), factorX, factorY);

                    g.setColor(Color.WHITE);
                    g.drawString(String.valueOf(ubicacion.getFila()),convertirX(rack.getPosX())+(factorX/2), convertirY(rack.getPosY()+ubicacion.getColumna()-1)+(factorY/2));
                }
                else
                {
                    g.setColor(Color.RED);
                    g.fillRect(convertirX(rack.getPosX()+ubicacion.getColumna()-1), convertirY(rack.getPosY()), factorX, factorY);
                    g.drawRect(convertirX(rack.getPosX()+ubicacion.getColumna()-1), convertirY(rack.getPosY()), factorX, factorY);

                    g.setColor(Color.WHITE);
                    g.drawString(String.valueOf(ubicacion.getFila()),convertirX(rack.getPosX()+ubicacion.getColumna()-1)+(factorX/2), convertirY(rack.getPosY())+(factorY/2));
                }                
        }
    }


    private void dibujaLeyenda(Graphics g)
    {
        
    }


    private void dibujaRecorridoOptimo(Graphics g)
    {
        for (Nodo nodo : recorridoOptimo)
        {

            g.setColor(Color.GREEN);
            g.fillRect(convertirX(nodo.getX()), convertirY(nodo.getY()), factorX, factorY);
            g.drawRect(convertirX(nodo.getX()), convertirY(nodo.getY()), factorX, factorY);
            
        }
    }


    private void ajustarGraficoVertical(java.awt.event.AdjustmentEvent evt)
    {

        offSetY = 65 * (1-scrollbar1.getValue());
        repaint();
    }


    private void ajustarGraficoHorizontal(java.awt.event.AdjustmentEvent evt)
    {
        offSetX = 50 * (1-scrollbar2.getValue());
        repaint();
    }


    private void calcularFactores()
    {
//        factorX = (pixelesAncho/mapa.getNumX());
//        factorY = (pixelesLargo/mapa.getNumY());
          factorX=40;
          factorY=40;
    }

    private int convertirX(int x)
    {
        return x*factorX+offSetX;
    }

    private int convertirY(int y)
    {
        return y*factorY+offSetY;
    }


    private int obtenerX(int x)
    {
        return (x-offSetX)/factorX;
    }

    private int obtenerY(int y)
    {
        return (y-offSetY)/factorY;
    }




    private Mapa mapa;
    private ArrayList<UbicacionBE> mejoresUbicaciones;
    private ArrayList<Nodo> recorridoOptimo;

    //private int pixelesAncho=600;
    //private int pixelesLargo=600;

    private int offSetX=50;
    private int offSetY=65;

    private int factorX;
    private int factorY;

}
